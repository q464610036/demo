spring.application.name=spring-boot-kafka

#####################################################################
# Kafka\u751F\u4EA7\u8005\u914D\u7F6E\u6587\u4EF6
# \u5305\u542B\uFF1A\u5FC5\u987B\u914D\u7F6E\u3001\u5F3A\u70C8\u5EFA\u8BAE\u914D\u7F6E\u548C\u53EF\u9009\u914D\u7F6E
# \u7528\u9014\uFF1A\u914D\u7F6EKafka\u751F\u4EA7\u8005\u7684\u884C\u4E3A\uFF0C\u5305\u62EC\u6D88\u606F\u53D1\u9001\u65B9\u5F0F\u3001\u6027\u80FD\u4F18\u5316\u3001\u53EF\u9760\u6027\u4FDD\u8BC1\u7B49
# \u6CE8\u610F\uFF1A\u67D0\u4E9B\u914D\u7F6E\u9879\u7684\u503C\u9700\u8981\u6839\u636E\u5B9E\u9645\u751F\u4EA7\u73AF\u5883\u8FDB\u884C\u8C03\u6574
#####################################################################

###########\u3010\u5FC5\u987B\u914D\u7F6E\u3011###########
# Kafka\u670D\u52A1\u5668\u5730\u5740\uFF0C\u591A\u4E2A\u5730\u5740\u7528\u9017\u53F7\u5206\u9694\uFF08\u5FC5\u987B\uFF09
# \u4F8B\u5982\uFF1Alocalhost:9092,localhost:9093,localhost:9094
spring.kafka.producer.bootstrap-servers=localhost:9092

# \u6D88\u606F\u952E\u548C\u503C\u7684\u5E8F\u5217\u5316\u5668\uFF08\u5FC5\u987B\uFF09
# \u7528\u4E8E\u5C06Java\u5BF9\u8C61\u8F6C\u6362\u4E3AKafka\u4E2D\u7684\u4E8C\u8FDB\u5236\u6570\u636E
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

###########\u3010\u5F3A\u70C8\u5EFA\u8BAE\u914D\u7F6E\u3011###########
# \u53EF\u9760\u6027\u914D\u7F6E
# acks=all \u6240\u6709\u526F\u672C\u90FD\u786E\u8BA4\u624D\u7B97\u5199\u5165\u6210\u529F\uFF0C\u6700\u9AD8\u53EF\u9760\u6027
# retries \u53D1\u9001\u5931\u8D25\u65F6\u7684\u91CD\u8BD5\u6B21\u6570
# enable.idempotence=true \u542F\u7528\u5E42\u7B49\u6027\uFF0C\u9632\u6B62\u6D88\u606F\u91CD\u590D
spring.kafka.producer.acks=all
spring.kafka.producer.retries=3
spring.kafka.producer.properties.enable.idempotence=true

# \u6027\u80FD\u914D\u7F6E
# batch-size \u6279\u91CF\u53D1\u9001\u7684\u5927\u5C0F\uFF08\u5B57\u8282\uFF09
# buffer-memory \u751F\u4EA7\u8005\u7F13\u51B2\u533A\u5927\u5C0F\uFF08\u5B57\u8282\uFF09
# compression-type \u6D88\u606F\u538B\u7F29\u7C7B\u578B\uFF08none, gzip, snappy, lz4, zstd\uFF09
spring.kafka.producer.batch-size=16384
spring.kafka.producer.buffer-memory=33554432
spring.kafka.producer.compression-type=snappy

# \u8BF7\u6C42\u914D\u7F6E
# request.timeout.ms \u7B49\u5F85\u670D\u52A1\u5668\u54CD\u5E94\u7684\u6700\u5927\u65F6\u95F4
# max.request.size \u5355\u4E2A\u8BF7\u6C42\u7684\u6700\u5927\u5927\u5C0F
spring.kafka.producer.properties.request.timeout.ms=30000
spring.kafka.producer.properties.max.request.size=1048576

# \u6279\u91CF\u53D1\u9001\u914D\u7F6E
# linger.ms \u5EF6\u8FDF\u53D1\u9001\u65F6\u95F4\uFF0C\u7B49\u5F85\u66F4\u591A\u6D88\u606F\u4E00\u8D77\u53D1\u9001
# \u589E\u52A0\u6B64\u503C\u53EF\u4EE5\u63D0\u9AD8\u541E\u5410\u91CF\uFF0C\u4F46\u4F1A\u589E\u52A0\u5EF6\u8FDF
spring.kafka.producer.properties.linger.ms=10

# \u53D1\u9001\u7F13\u51B2\u533A\u914D\u7F6E
# send.buffer.bytes TCP\u53D1\u9001\u7F13\u51B2\u533A\u5927\u5C0F
# receive.buffer.bytes TCP\u63A5\u6536\u7F13\u51B2\u533A\u5927\u5C0F
spring.kafka.producer.properties.send.buffer.bytes=131072
spring.kafka.producer.properties.receive.buffer.bytes=32768

###########\u3010\u53EF\u9009\u914D\u7F6E\u3011###########
# \u4E8B\u52A1\u914D\u7F6E
# \u5982\u679C\u542F\u7528\u4E8B\u52A1\uFF0C\u5FC5\u987B\u914D\u7F6E\u4E8B\u52A1ID\u524D\u7F00
# \u4E0D\u540C\u7684\u751F\u4EA7\u8005\u5FC5\u987B\u4F7F\u7528\u4E0D\u540C\u7684\u4E8B\u52A1ID
#spring.kafka.producer.transaction-id-prefix=tx-

# \u751F\u4EA7\u8005\u9650\u5236\u914D\u7F6E
# max.block.ms \u53D1\u9001\u963B\u585E\u7684\u6700\u5927\u65F6\u95F4
# max.in.flight.requests.per.connection \u5355\u4E2A\u8FDE\u63A5\u6700\u5927\u672A\u786E\u8BA4\u8BF7\u6C42\u6570
# spring.kafka.producer.properties.max.block.ms=60000
# spring.kafka.producer.properties.max.in.flight.requests.per.connection=5

#####################################################################
# Kafka\u6D88\u8D39\u8005\u914D\u7F6E\u6587\u4EF6
# \u5305\u542B\uFF1A\u5FC5\u987B\u914D\u7F6E\u3001\u5F3A\u70C8\u5EFA\u8BAE\u914D\u7F6E\u548C\u53EF\u9009\u914D\u7F6E
# \u7528\u9014\uFF1A\u914D\u7F6EKafka\u6D88\u8D39\u8005\u7684\u884C\u4E3A\uFF0C\u5305\u62EC\u6D88\u8D39\u65B9\u5F0F\u3001\u6279\u91CF\u5904\u7406\u3001\u4F1A\u8BDD\u7BA1\u7406\u7B49
# \u6CE8\u610F\uFF1A\u67D0\u4E9B\u914D\u7F6E\u9879\u7684\u503C\u9700\u8981\u6839\u636E\u5B9E\u9645\u751F\u4EA7\u73AF\u5883\u8FDB\u884C\u8C03\u6574
#####################################################################

###########\u3010\u5FC5\u987B\u914D\u7F6E\u3011###########
# Kafka\u670D\u52A1\u5668\u5730\u5740\uFF0C\u591A\u4E2A\u5730\u5740\u7528\u9017\u53F7\u5206\u9694\uFF08\u5FC5\u987B\uFF09
# \u4F8B\u5982\uFF1Alocalhost:9092,localhost:9093,localhost:9094
spring.kafka.consumer.bootstrap-servers=localhost:9092

# \u6D88\u8D39\u8005\u7EC4ID\uFF0C\u540C\u4E00\u7EC4\u7684\u6D88\u8D39\u8005\u534F\u540C\u6D88\u8D39\u6D88\u606F\uFF08\u5FC5\u987B\uFF09
# \u76F8\u540C\u7EC4ID\u7684\u6D88\u8D39\u8005\u6D88\u8D39\u4E0D\u540C\u5206\u533A\u7684\u6D88\u606F\uFF0C\u5B9E\u73B0\u8D1F\u8F7D\u5747\u8861
spring.kafka.consumer.group-id=defaultConsumerGroup

# \u6D88\u606F\u952E\u548C\u503C\u7684\u53CD\u5E8F\u5217\u5316\u5668\uFF08\u5FC5\u987B\uFF09
# \u7528\u4E8E\u5C06Kafka\u4E2D\u7684\u4E8C\u8FDB\u5236\u6570\u636E\u8F6C\u6362\u4E3AJava\u5BF9\u8C61
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

###########\u3010\u5F3A\u70C8\u5EFA\u8BAE\u914D\u7F6E\u3011###########
# \u6D88\u606F\u63D0\u4EA4\u65B9\u5F0F\u914D\u7F6E
# enable-auto-commit=false \u5173\u95ED\u81EA\u52A8\u63D0\u4EA4\uFF0C\u9632\u6B62\u6D88\u606F\u4E22\u5931
# ack-mode=MANUAL \u624B\u52A8\u786E\u8BA4\u6A21\u5F0F\uFF0C\u786E\u4FDD\u6D88\u606F\u88AB\u6B63\u786E\u5904\u7406\u540E\u624D\u63D0\u4EA4
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.listener.ack-mode=MANUAL

# \u6279\u91CF\u6D88\u8D39\u914D\u7F6E
# type=batch \u542F\u7528\u6279\u91CF\u6D88\u8D39\u6A21\u5F0F\uFF0C\u63D0\u9AD8\u6D88\u8D39\u6548\u7387
# max-poll-records \u6BCF\u6B21\u6279\u91CF\u6D88\u8D39\u7684\u6700\u5927\u6D88\u606F\u6570
spring.kafka.listener.type=batch
spring.kafka.consumer.max-poll-records=500

# \u4F1A\u8BDD\u8D85\u65F6\u914D\u7F6E
# session.timeout.ms \u6D88\u8D39\u8005\u7EC4\u4F1A\u8BDD\u8D85\u65F6\u65F6\u95F4\uFF0C\u5982\u679C\u8D85\u8FC7\u6B64\u65F6\u95F4\u6CA1\u6709\u5FC3\u8DF3\u5219\u8BA4\u4E3A\u6D88\u8D39\u8005\u6B7B\u4EA1
# max.poll.interval.ms \u4E24\u6B21poll\u4E4B\u95F4\u7684\u6700\u5927\u95F4\u9694\uFF0C\u8D85\u8FC7\u5219\u8BA4\u4E3A\u6D88\u8D39\u8005\u5904\u7406\u80FD\u529B\u4E0D\u8DB3
spring.kafka.consumer.properties.session.timeout.ms=45000
spring.kafka.consumer.properties.max.poll.interval.ms=300000

# \u504F\u79FB\u91CF\u914D\u7F6E
# earliest: \u4ECE\u6700\u65E9\u7684\u6D88\u606F\u5F00\u59CB\u6D88\u8D39
# latest: \u4ECE\u6700\u65B0\u7684\u6D88\u606F\u5F00\u59CB\u6D88\u8D39,\u4FDD\u8BC1\u6D88\u8D39\u8005\u53EA\u5904\u7406\u6700\u65B0\u7684\u6D88\u606F
# none: \u5982\u679C\u65E0\u504F\u79FB\u91CF\u5219\u629B\u51FA\u5F02\u5E38
spring.kafka.consumer.auto-offset-reset=latest

# \u6D88\u8D39\u8005\u62C9\u53D6\u914D\u7F6E
# fetch.min.bytes \u6BCF\u6B21\u6700\u5C0F\u62C9\u53D6\u5927\u5C0F\uFF0C\u907F\u514D\u9891\u7E41\u62C9\u53D6
# fetch.max.wait.ms \u5F53\u6570\u636E\u91CF\u4E0D\u8DB3fetch.min.bytes\u65F6\uFF0C\u6700\u591A\u7B49\u5F85\u65F6\u95F4
spring.kafka.consumer.fetch.min.bytes=1
spring.kafka.consumer.fetch.max.wait.ms=500

# \u5FC3\u8DF3\u914D\u7F6E
# heartbeat.interval.ms \u5FC3\u8DF3\u95F4\u9694\u65F6\u95F4\uFF0C\u5FC5\u987B\u5C0F\u4E8Esession.timeout.ms
spring.kafka.consumer.properties.heartbeat.interval.ms=3000

###########\u3010\u53EF\u9009\u914D\u7F6E\u3011###########
# \u5E76\u53D1\u6D88\u8D39\u914D\u7F6E
# \u8BBE\u7F6E\u6D88\u8D39\u8005\u7EBF\u7A0B\u6570\uFF0C\u63D0\u9AD8\u6D88\u8D39\u80FD\u529B
spring.kafka.listener.concurrency=3

# \u6D88\u8D39\u8005\u9650\u5236\u914D\u7F6E
# max.partition.fetch.bytes \u6BCF\u4E2A\u5206\u533A\u8FD4\u56DE\u7684\u6700\u5927\u6570\u636E\u91CF
# fetch.max.bytes \u4E00\u6B21\u8BF7\u6C42\u4E2D\u8FD4\u56DE\u7684\u6700\u5927\u6570\u636E\u91CF
spring.kafka.consumer.max-partition-fetch-bytes=1048576
spring.kafka.consumer.fetch.max.bytes=52428800
